"""
# 01-Learning from First Principles

This notebook explores learning as **function approximation** using a simple **linear model**.

## Key Concepts:
- Understanding learning as pattern recognition
- Implementing a basic function approximator
- Visualizing learning as optimization
"""

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic data (y = 2x + 3 + noise)
np.random.seed(42)
x = np.linspace(-10, 10, 50)
y = 2*x + 3 + np.random.normal(0, 2, size=x.shape)

# Visualizing the data
plt.scatter(x, y, label="Data", color="blue")
plt.xlabel("Input (x)")
plt.ylabel("Output (y)")
plt.title("Learning as Function Approximation")
plt.legend()
plt.show()

# Simple Linear Regression (Finding best-fit line)
def linear_regression(x, y):
    """Computes slope (m) and intercept (b) for y = mx + b"""
    n = len(x)
    m = (n * np.sum(x*y) - np.sum(x) * np.sum(y)) / (n * np.sum(x**2) - np.sum(x)**2)
    b = (np.sum(y) - m * np.sum(x)) / n
    return m, b

# Compute best-fit line parameters
m, b = linear_regression(x, y)
print(f"Learned Parameters: m = {m:.2f}, b = {b:.2f}")

# Plot best-fit line
plt.scatter(x, y, label="Data", color="blue")
plt.plot(x, m*x + b, color="red", label=f"y = {m:.2f}x + {b:.2f}")
plt.xlabel("Input (x)")
plt.ylabel("Output (y)")
plt.title("Linear Regression - Learning the Function")
plt.legend()
plt.show()
